{"version":3,"sources":["UserRoute.js"],"names":["express","require","JWT","UserModel","Router","router","argon2","req","res","_req$body","name","email","password","hash","userexist","regeneratorRuntime","async","_context","prev","next","body","awrap","sent","findOne","abrupt","status","send","message","create","save","t0","stop","REFRESHKEY","post","_req$body2","user","token","refreshToken","_context2","verify","sign","id","_id","SECRETKEY","expiresIn","headers","newUser"],"mappings":"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","file":"UserRoute.min.js","sourcesContent":["const express = require('express');\nconst JWT = require(\"jsonwebtoken\")\nconst argon2 = require(\"argon2\")\nconst UserModel = require(\"../Models/UserModel\")\nconst router = express.Router()\n\nrouter.post('/signup', async (req, res)=> {\n    const {name, email, password} = req.body;\n    const hash = await argon2.hash(password)\n    // console.log(req.body)\n    const userexist = await UserModel.findOne({email})\n    try {\n        if (userexist) {\n            return res.status(400).send({ message: \"User already exist, Please enter different email\" })\n        }\n        const newUser = await UserModel.create({name, email, password: hash })\n        newUser.save()\n        return res.status(201).send({ message: \"User created successfully\" })\n    } catch (error) {\n        return res.status(404).send({ message: error.message })\n    }\n\n});\n\n\nconst REFRESHKEY = \"REFRESH12\"\nconst SECRETKEY = \"MOCK12\"\nrouter.post(\"/login\", async (req, res) => {\n    const { email, password } = req.body;\n\n    const user = await UserModel.findOne({ email });\n    if (user) {\n        if (await argon2.verify(user.password, password)) {\n            const token = JWT.sign({ id: user._id, name: user.name }, SECRETKEY, { expiresIn: \"7 days\" });\n            const refreshToken = JWT.sign({ id: user._id, name: user.name }, REFRESHKEY, { expiresIn: \"28 days\" })\n            return res.status(200).send({ message: \"Login successfully\", token, refreshToken, email: user.email })\n        }\n    }\n    return res.status(401).send(\"Invalid Credentials or User is not Registerd\")\n\n})\n\nrouter.post('/logout', (req, res) => {\n    const token = req.headers['authorization']\n    try {\n        return res.status(200).send({ message: \"Logout Successfull\" })\n    } catch (error) {\n        return res.status(404).send({ message: error.message })\n    }\n})\n\n\nmodule.exports = router;"]}