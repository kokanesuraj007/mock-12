{"version":3,"sources":["UserRoute.js"],"names":["express","require","JWT","argon2","UserModel","router","Router","post","req","res","body","name","email","password","hash","findOne","userexist","status","send","message","create","newUser","save","REFRESHKEY","SECRETKEY","user","verify","token","sign","id","_id","expiresIn","refreshToken","headers","error","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,qBAAD,CAAzB;;AACA,IAAMI,MAAM,GAAGL,OAAO,CAACM,MAAR,EAAf;AAEAD,MAAM,CAACE,IAAP,CAAY,SAAZ,EAAuB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACaD,GAAG,CAACE,IADjB,EACZC,IADY,aACZA,IADY,EACNC,KADM,aACNA,KADM,EACCC,QADD,aACCA,QADD;AAAA;AAAA,0CAEAV,MAAM,CAACW,IAAP,CAAYD,QAAZ,CAFA;;AAAA;AAEbC,UAAAA,IAFa;AAAA;AAAA,0CAIKV,SAAS,CAACW,OAAV,CAAkB;AAACH,YAAAA,KAAK,EAALA;AAAD,WAAlB,CAJL;;AAAA;AAIbI,UAAAA,SAJa;AAAA;;AAAA,eAMXA,SANW;AAAA;AAAA;AAAA;;AAAA,2CAOJP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAPI;;AAAA;AAAA;AAAA,0CASOf,SAAS,CAACgB,MAAV,CAAiB;AAACT,YAAAA,IAAI,EAAJA,IAAD;AAAOC,YAAAA,KAAK,EAALA,KAAP;AAAcC,YAAAA,QAAQ,EAAEC;AAAxB,WAAjB,CATP;;AAAA;AASTO,UAAAA,OATS;AAUfA,UAAAA,OAAO,CAACC,IAAR;AAVe,2CAWRb,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAXQ;;AAAA;AAAA;AAAA;AAAA,2CAaRV,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,YAAMA;AAAjB,WAArB,CAbQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;AAmBA,IAAMI,UAAU,GAAG,WAAnB;AACA,IAAMC,SAAS,GAAG,QAAlB;AACAnB,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsB,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACUD,GAAG,CAACE,IADd,EACVE,KADU,cACVA,KADU,EACHC,QADG,cACHA,QADG;AAAA;AAAA,0CAGCT,SAAS,CAACW,OAAV,CAAkB;AAAEH,YAAAA,KAAK,EAALA;AAAF,WAAlB,CAHD;;AAAA;AAGZa,UAAAA,IAHY;;AAAA,eAIdA,IAJc;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAKJtB,MAAM,CAACuB,MAAP,CAAcD,IAAI,CAACZ,QAAnB,EAA6BA,QAA7B,CALI;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMJc,UAAAA,KANI,GAMIzB,GAAG,CAAC0B,IAAJ,CAAS;AAAEC,YAAAA,EAAE,EAAEJ,IAAI,CAACK,GAAX;AAAgBnB,YAAAA,IAAI,EAAEc,IAAI,CAACd;AAA3B,WAAT,EAA4Ca,SAA5C,EAAuD;AAAEO,YAAAA,SAAS,EAAE;AAAb,WAAvD,CANJ;AAOJC,UAAAA,YAPI,GAOW9B,GAAG,CAAC0B,IAAJ,CAAS;AAAEC,YAAAA,EAAE,EAAEJ,IAAI,CAACK,GAAX;AAAgBnB,YAAAA,IAAI,EAAEc,IAAI,CAACd;AAA3B,WAAT,EAA4CY,UAA5C,EAAwD;AAAEQ,YAAAA,SAAS,EAAE;AAAb,WAAxD,CAPX;AAAA,4CAQHtB,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,oBAAX;AAAiCQ,YAAAA,KAAK,EAALA,KAAjC;AAAwCK,YAAAA,YAAY,EAAZA,YAAxC;AAAsDpB,YAAAA,KAAK,EAAEa,IAAI,CAACb;AAAlE,WAArB,CARG;;AAAA;AAAA,4CAWXH,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8CAArB,CAXW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAeAb,MAAM,CAACE,IAAP,CAAY,SAAZ,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjC,MAAMkB,KAAK,GAAGnB,GAAG,CAACyB,OAAJ,CAAY,eAAZ,CAAd;;AACA,MAAI;AACA,WAAOxB,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACH,GAFD,CAEE,OAAOe,KAAP,EAAc;AACZ,WAAOzB,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAEe,KAAK,CAACf;AAAjB,KAArB,CAAP;AACH;AACJ,CAPD;AAUAgB,MAAM,CAACC,OAAP,GAAiB/B,MAAjB","sourcesContent":["const express = require('express');\nconst JWT = require(\"jsonwebtoken\")\nconst argon2 = require(\"argon2\")\nconst UserModel = require(\"../Models/UserModel\")\nconst router = express.Router()\n\nrouter.post('/signup', async (req, res)=> {\n    const {name, email, password} = req.body;\n    const hash = await argon2.hash(password)\n    // console.log(req.body)\n    const userexist = await UserModel.findOne({email})\n    try {\n        if (userexist) {\n            return res.status(400).send({ message: \"User already exist, Please enter different email\" })\n        }\n        const newUser = await UserModel.create({name, email, password: hash })\n        newUser.save()\n        return res.status(201).send({ message: \"User created successfully\" })\n    } catch (error) {\n        return res.status(404).send({ message: error.message })\n    }\n\n});\n\n\nconst REFRESHKEY = \"REFRESH12\"\nconst SECRETKEY = \"MOCK12\"\nrouter.post(\"/login\", async (req, res) => {\n    const { email, password } = req.body;\n\n    const user = await UserModel.findOne({ email });\n    if (user) {\n        if (await argon2.verify(user.password, password)) {\n            const token = JWT.sign({ id: user._id, name: user.name }, SECRETKEY, { expiresIn: \"7 days\" });\n            const refreshToken = JWT.sign({ id: user._id, name: user.name }, REFRESHKEY, { expiresIn: \"28 days\" })\n            return res.status(200).send({ message: \"Login successfully\", token, refreshToken, email: user.email })\n        }\n    }\n    return res.status(401).send(\"Invalid Credentials or User is not Registerd\")\n\n})\n\nrouter.post('/logout', (req, res) => {\n    const token = req.headers['authorization']\n    try {\n        return res.status(200).send({ message: \"Logout Successfull\" })\n    } catch (error) {\n        return res.status(404).send({ message: error.message })\n    }\n})\n\n\nmodule.exports = router;"],"file":"UserRoute.dev.js"}